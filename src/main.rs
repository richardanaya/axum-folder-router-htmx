use axum::extract::FromRef;
use axum_extra::extract::cookie::Key;
use sqlx::postgres::PgPoolOptions; // Use PgPoolOptions
use sqlx::PgPool; // Import PgPool
use std::env;
use tower_http::services::ServeDir;

mod model;

#[derive(Clone)]
pub struct AppState {
    key: Key,
    pool: PgPool,
}

impl FromRef<AppState> for Key {
    fn from_ref(state: &AppState) -> Self {
        state.key.clone()
    }
}

impl FromRef<AppState> for PgPool {
    fn from_ref(state: &AppState) -> Self {
        state.pool.clone()
    }
}

// Item struct definition is removed from here

mod api_routes {
    // This is generated by build.rs
    include!(concat!(env!("OUT_DIR"), "/routes.rs"));
}

#[tokio::main]
async fn main() -> Result<(), sqlx::Error> {
    // Return sqlx::Error
    // Load environment variables from .env file
    dotenvy::dotenv().expect("Failed to read .env file");

    // --- Database Connection ---
    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");

    // Create a connection pool using PgPoolOptions
    let pool = PgPoolOptions::new()
        .max_connections(5) // Example: Set max connections
        .connect(&database_url)
        .await?; // Use ? for error propagation
    println!("Database connection pool created.");
    // --- End Database Connection ---

    // --- Web Server Setup ---
    // Generate a secure key for cookie handling.
    let key = Key::generate();

    // Create the application state.
    let app_state = AppState {
        key,
        pool: pool.clone(), // Clone the pool for the AppState
    };

    // Build the router and provide the state.
    let app = api_routes::build_router()
        .fallback_service(ServeDir::new("public"))
        .with_state(app_state);

    // Bind the listener and serve the application.
    let port = env::var("PORT").unwrap_or_else(|_| "3000".to_string());
    let port = port.parse::<u16>().unwrap_or(3000);

    let listener = tokio::net::TcpListener::bind(format!("0.0.0.0:{}", port))
        .await
        .unwrap(); // Using unwrap here for simplicity, consider proper error handling
    println!("Listening on http://{}", listener.local_addr().unwrap());
    axum::serve(listener, app).await.unwrap(); // Using unwrap here

    Ok(()) // Return Ok(()) at the end of main
}
